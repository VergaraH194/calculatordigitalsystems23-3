
LIBRARY IEEE;
USE ieee.std_logic_1164.all;

-------------------------------------------------------------------------------------------------------------------

ENTITY main IS --función principal del programa
  -----------------------------------------------------------------------------------------
	PORT(		a			: 	IN 	STD_LOGIC_VECTOR(3 DOWNTO 0);	--número de entrada 1
			b			: 	IN 	STD_LOGIC_VECTOR(3 DOWNTO 0);	--número de entrada 2
			cin_a			:	IN 	STD_LOGIC;			--entrada sw1, selecciona si se desea sumar o restar
			am_sel			:	IN	STD_LOGIC;			--entrada sw0, selecciona si sumar/restar o multiplicar
			sseg			:	OUT 	STD_LOGIC_VECTOR(6 DOWNTO 0);	--salida para HEX0
			sseg1			:	OUT 	STD_LOGIC_VECTOR(6 DOWNTO 0);	--salida para HEX1
			sseg2			:	OUT 	STD_LOGIC_VECTOR(6 DOWNTO 0);	--salida para HEX2
			sseg3			:	OUT 	STD_LOGIC_VECTOR(6 DOWNTO 0)	--salida para HEX3
			);
  ------------------------------------------------------------------------------------------
END ENTITY;

-------------------------------------------------------------------------------------------------------------------

ARCHITECTURE behaviour OF main IS

SIGNAL s0	:	STD_LOGIC_VECTOR (3 DOWNTO 0);	--resultado inicial 4 bits de suma o resta
SIGNAL sa	:	STD_LOGIC_VECTOR (7 DOWNTO 0);	--resultado final 4 bits de suma o resta
SIGNAL sm	:	STD_LOGIC_VECTOR (7 DOWNTO 0);	--resultado de la multiplicación
SIGNAL sf	:	STD_LOGIC_VECTOR (7 DOWNTO 0);	--resultado que depende de sw0 y sw1 manda el resultado de la-
							--operación indicada
SIGNAL error	:	STD_LOGIC;			--bandera de error en caso de que a o b sea mayor a 9
SIGNAL cout	:	STD_LOGIC;			--guarda el carry out de la suma
SIGNAL tens 	: 	STD_LOGIC_VECTOR (3 DOWNTO 0);	--valor de las decenas del resultado
SIGNAL unit 	: 	STD_LOGIC_VECTOR (7 DOWNTO 0);	--valor de las unidades del resultado

--------------------------------------------------------------------------------------------------------------------

BEGIN


	sa <= "000"	 & cout & s0 	WHEN cout='1'	AND cin_a='1' ELSE --para cuando el resultado de la suma da mayor a 15-
									   --agregar el carry out a la salida
	      "0000" & s0;					           --concatenar el resultado de la suma para que sea de 8 bits


   -----------------------------------
	adder_sub		: ENTITY work.adder			--llamar al archivo que realiza la suma/resta 	
	PORT MAP 	(  			a    =>  a,				
						b    =>  b,
						Cin  =>  Cin_a,
						s2   =>  s0,			
						Cout =>  cout);
	-----------------------------------
	----------------------------------------
	multiplier_0	: ENTITY work.multiplier 	--llamar al archivo que realiza la multiplicación 
	PORT MAP 	(  			a    		=>  a,
						b    		=>  b,
						res_m	 	=>	sm);
	-----------------------------------------					
	-----------------------------------------										
	bin_to_bcd_0	: ENTITY work.bin_to_bcd	--llamar al archivo que realiza la separación de dígitos
	PORT MAP (				res_f	=> sf,
						unit	=> unit,
						tens1 	=> tens);
	-----------------------------------------					
	-------------------------------------					
	sw0				: ENTITY work.mux2_1f		--llamar al archivo que decide debido a sw0 que operación mostrar
	PORT MAP (				xa		=> sa,
						xm		=> sm,
						sel		=> am_sel,
						y  		=> sf);
	--------------------------------------	
   -------------------------------------------------	
	error_0			: ENTITY work.nBitcomparator_9 --llamar al archivo que alza la bandera en caso del "error" definido
	PORT MAP (				x	=> a,
						y	=> b,
						lg 	=> error);
	-------------------------------------------------
	------------------------------------------
	ssega				: ENTITY work.bin_to_7seg		--llamar al archivo que muestra los dígitos en los displays 7 segmentos
	PORT MAP (				bin		=>  a,
						sseg3		=>  sseg3,
						bin2  		=>  b,
						sseg2	 	=>  sseg2,
						bin3   		=>  unit,
						sseg	 	=>  sseg,
						bin1		=>  tens,
						cin 	 	=>  cin_a,
			         		sseg1  		=>  sseg1,
						am_sel		=>  am_sel,
						error  		=>  error);
	-----------------------------------------

END ARCHITECTURE behaviour;











